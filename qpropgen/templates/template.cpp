// {{ autogenerated_disclaimer }}
#include <{{ header }}>



{%- for declaration in forward_declarations %}
#include <{{declaration}}.h>
{%- endfor %}

{%- if namespace %}
namespace {{namespace}} {
{%- endif %}

{{ className }}::{{ className }}(QObject* parent)
    : {{ baseClassName }}(parent) {
    {% for property in properties if not property.impl == 'pure' %}{% if property.fk == True and baseClassName == 'QDjangoModel' %}setForeignKey("{{property.name}}", new {{ property.type[:-1]}}(this));
    {%endif%}{% endfor %}
}

{% for property in properties if not property.impl == 'pure' %}
{{ property.type }} {{ className }}::{{ property.name }}() const {
    {% if property.fk == True and baseClassName == 'QDjangoModel' %}
    return qobject_cast<{{ property.type }}>(foreignKey("{{property.name}}"));
    {%else%}
    return {{ property.varName }};
    {%endif%}
}

{%- if property.mutability == 'readwrite' %}
void {{ className }}::{{ property.setterName }}({{ property.argType }} value) {
    {% if property.fk == True and baseClassName == 'QDjangoModel' %}
    setForeignKey("{{property.name}}", value);
    {%else%}
    {% if property.type == 'qreal' %}
    if (qFuzzyCompare({{ property.varName }}, value)) {
    {% else %}
    if ({{ property.varName }} == value) {
    {% endif %}
        return;
    }
    {{ property.varName }} = value;
    {{ property.name }}Changed(value);
    {%endif%}
}
{%- endif %}
{% endfor %}

{%- if namespace %}
} //namespace {{namespace}}
{%- endif %}
